generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  role Role @default(USER)
  products Product[]
  orders Order[]
  refreshToken String? 
  stripeCustomerId String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())
  name String
  description String
  price Float
  owner User @relation(fields: [ownerId], references: [id])
  ownerId Int
  photos Photo[]
  category Category @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  productCustomizations ProductCustomization[]
  categoryId Int
  isAvailable Boolean @default(true)
  quantity Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Photo {
  id Int @id @default(autoincrement())
  url String
  product Product @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
}

model Category {
  id Int @id @default(autoincrement())
  name String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  orderItems OrderItem[]
  totalPrice Float
  status StatusPedido @default(EM_PREPARO)
  enderecoEntrega String?
  metodoPagamento MetodoPagamento @default(PIX)
  paymentStatus PaymentStatus @default(PENDING)
  paymentIntentId String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id Int @id @default(autoincrement())
  orderId Int
  order Order @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  productId Int
  quantity Int @default(1)
  subtotal Float @default(0)
  price Float @default(0)
  customizations OrderItemCustomization[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Discount {
  id Int @id @default(autoincrement())
  name String
  type DiscountType @default(PERCENTAGE)
  value Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductCustomization {
  id Int @id @default(autoincrement())
  product Product @relation(fields: [productId], references: [id])
  productId Int
  name String
  description String?
  isRequired Boolean @default(false)
  minOptions Int @default(0)
  maxOptions Int @default(5)
  options CustomizationOption[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CustomizationOption {
  id          Int       @id @default(autoincrement())
  customization ProductCustomization @relation(fields: [customizationId], references: [id])
  customizationId Int
  name        String 
  description String?
  price       Float     @default(0)
  isAvailable Boolean   @default(true)
  maxQuantity Int       @default(1)
  order       Int       @default(0)
  orderItemCustomization OrderItemCustomization[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("customization_options")
}

model OrderItemCustomization {
  id          Int       @id @default(autoincrement())
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId Int
  option      CustomizationOption @relation(fields: [optionId], references: [id])
  optionId    Int
  quantity    Int       @default(1)
  price       Float
  name        String   
  createdAt   DateTime  @default(now())

  @@map("order_item_customizations")
}

// ENUMS

enum DiscountType {
  PERCENTAGE
  FIXED
}
enum Role {
  USER
  ADMIN
}

enum StatusPedido {
  EM_PREPARO
  PRONTO
  PARA_RETIRAR
  RETIRADO
  EM_TRANSPORTE
  ENTREGUE
  CANCELADO
}

enum MetodoPagamento {
  PIX
  CARTAO
  DINHEIRO
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
  CANCELED
}